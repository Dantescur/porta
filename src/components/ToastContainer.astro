---
import type { ToastOptions } from "./ToastContainer.types";

interface ToastAPI {
  success: (message: string, options?: ToastOptions) => number;
  error: (message: string, options?: ToastOptions) => number;
  warning: (message: string, options?: ToastOptions) => number;
  info: (message: string, options?: ToastOptions) => number;
  clear: () => void;
}

// Extend Window interface to include the toast API
declare global {
  interface Window {
    toast?: ToastAPI;
  }
}
---

<div id="toast-container" class="fixed top-4 right-4 z-50 space-y-2 max-w-sm" aria-live="polite"></div>

<script>
import type { Type } from "./ToastContainer.types";

  interface ToastOptions {
    duration?: number;
    title?: string;
  }

  interface ToastItem {
    element: HTMLDivElement;
    timer: number | null;
  }

  interface PauseState {
    isPaused: boolean;
    pausedTime: number;
    startTime: number;
  }

  interface ToastElement extends HTMLDivElement {
    _pauseState?: PauseState;
  }

  class ToastManager {
    private container: HTMLDivElement;
    private toastId: number;
    private toasts: Map<number, ToastItem>;

    constructor() {
      const container = document.getElementById('toast-container');
      if (!container) {
        throw new Error('Toast container not found');
      }
      
      this.container = container as HTMLDivElement;
      this.toastId = 0;
      this.toasts = new Map();
    }

    private generateId(): number {
      return ++this.toastId;
    }

    create(message: string, type: Type, options: ToastOptions = {}): number {
      const id = this.generateId();
      const duration = options.duration ?? 4000;
      const title = options.title;

      const toast = this.createToastElement(id, message, type, title, duration);
      this.container.appendChild(toast);

      requestAnimationFrame(() => {
        toast.classList.remove('translate-x-full', 'opacity-0');
      });

      let timer: number | null = null;
      if (duration > 0) {
        timer = this.startTimer(id, duration);
      }

      this.toasts.set(id, { element: toast, timer });
      return id;
    }

    private createToastElement(
      id: number, 
      message: string, 
      type: Type, 
      title: string | undefined, 
      duration: number
    ): ToastElement {
      const toast = document.createElement('div') as ToastElement;
      toast.className = `toast-item transform transition-all duration-300 ease-in-out translate-x-full opacity-0 relative rounded-lg shadow-lg backdrop-blur-sm border cursor-pointer hover:scale-105 hover:shadow-xl ${this.getToastClasses(type)}`;
      toast.dataset.id = id.toString();

      const progressBar = duration > 0 ? `
        <div class="progress-bar absolute bottom-0 left-0 h-1 rounded-bl-lg transition-all duration-75 ease-linear ${this.getProgressBarClasses(type)}" style="width: 100%"></div>
      ` : '';

      toast.innerHTML = `
        ${progressBar}
        <div class="flex items-start gap-3 p-4">
          <div class="shrink-0 mt-0.5">
            ${this.getIcon(type)}
          </div>
          <div class="flex-1 min-w-0">
            ${title ? `<h4 class="text-sm font-semibold text-gray-900 mb-1">${title}</h4>` : ''}
            <p class="text-sm text-gray-700">${message}</p>
          </div>
          <button class="close-btn shrink-0 text-gray-400 hover:text-gray-600 transition-colors duration-200" aria-label="Close notification">
            <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path>
            </svg>
          </button>
        </div>
      `;

      const closeBtn = toast.querySelector('.close-btn') as HTMLButtonElement;
      closeBtn.addEventListener('click', (e) => {
        e.stopPropagation();
        this.remove(id);
      });

      if (duration > 0) {
        const pauseState: PauseState = {
          isPaused: false,
          pausedTime: 0,
          startTime: Date.now()
        };

        toast._pauseState = pauseState;

        toast.addEventListener('mouseenter', () => {
          if (toast._pauseState) {
            toast._pauseState.isPaused = true;
            toast._pauseState.pausedTime = Date.now() - toast._pauseState.startTime;
          }
        });

        toast.addEventListener('mouseleave', () => {
          if (toast._pauseState && toast._pauseState.isPaused) {
            toast._pauseState.isPaused = false;
            toast._pauseState.startTime = Date.now() - toast._pauseState.pausedTime;
          }
        });
      }

      return toast;
    }

    private startTimer(id: number, duration: number): number {
      const toastItem = this.toasts.get(id);
      if (!toastItem) return 0;

      const progressBar = toastItem.element.querySelector('.progress-bar') as HTMLDivElement;
      const startTime = Date.now();

      const updateProgress = () => {
        const toastElement = toastItem.element as ToastElement;
        const pauseState = toastElement._pauseState;
        
        if (pauseState && pauseState.isPaused) {
          requestAnimationFrame(updateProgress);
          return;
        }

        const elapsed = Date.now() - (pauseState?.startTime || startTime);
        const progress = Math.max(0, 100 - (elapsed / duration) * 100);

        if (progressBar) {
          progressBar.style.width = `${progress}%`;
        }

        if (progress <= 0) {
          this.remove(id);
        } else {
          requestAnimationFrame(updateProgress);
        }
      };

      return requestAnimationFrame(updateProgress);
    }

    remove(id: number): void {
      const toast = this.toasts.get(id);
      if (!toast) return;

      if (toast.timer) {
        cancelAnimationFrame(toast.timer);
      }

      toast.element.classList.add('translate-x-full', 'opacity-0');
      
      setTimeout(() => {
        if (toast.element.parentNode) {
          toast.element.parentNode.removeChild(toast.element);
        }
        this.toasts.delete(id);
      }, 300);
    }

    clear(): void {
      this.toasts.forEach((_, id) => this.remove(id));
    }

    private getToastClasses(type: Type): string {
      const baseClasses = 'bg-white/90 border-l-4';
      
      switch (type) {
        case 'success':
          return `${baseClasses} border-l-green-500 border-green-200`;
        case 'error':
          return `${baseClasses} border-l-red-500 border-red-200`;
        case 'warning':
          return `${baseClasses} border-l-yellow-500 border-yellow-200`;
        case 'info':
        default:
          return `${baseClasses} border-l-blue-500 border-blue-200`;
      }
    }

    private getProgressBarClasses(type: Type): string {
      switch (type) {
        case 'success':
          return 'bg-green-500';
        case 'error':
          return 'bg-red-500';
        case 'warning':
          return 'bg-yellow-500';
        case 'info':
        default:
          return 'bg-blue-500';
      }
    }

    private getIcon(type: Type): string {
      const iconClasses = 'w-5 h-5';
      
      switch (type) {
        case 'success':
          return `<svg class="${iconClasses} text-green-500" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/>
          </svg>`;
        case 'error':
          return `<svg class="${iconClasses} text-red-500" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clip-rule="evenodd"/>
          </svg>`;
        case 'warning':
          return `<svg class="${iconClasses} text-yellow-500" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd"/>
          </svg>`;
        case 'info':
        default:
          return `<svg class="${iconClasses} text-blue-500" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"/>
          </svg>`;
      }
    }

    success(message: string, options: ToastOptions = {}): number {
      return this.create(message, 'success', options);
    }

    error(message: string, options: ToastOptions = {}): number {
      return this.create(message, 'error', options);
    }

    warning(message: string, options: ToastOptions = {}): number {
      return this.create(message, 'warning', options);
    }

    info(message: string, options: ToastOptions = {}): number {
      return this.create(message, 'info', options);
    }
  }

  let toastManager: ToastManager | null = null;
  
  function initToast(): void {
    if (typeof window !== 'undefined' && document.getElementById('toast-container')) {
      try {
        toastManager = new ToastManager();
        
        window.toast = {
          success: (message: string, options?: ToastOptions) => toastManager!.success(message, options || {}),
          error: (message: string, options?: ToastOptions) => toastManager!.error(message, options || {}),
          warning: (message: string, options?: ToastOptions) => toastManager!.warning(message, options || {}),
          info: (message: string, options?: ToastOptions) => toastManager!.info(message, options || {}),
          clear: () => toastManager!.clear()
        };
      } catch (error) {
        console.error('Failed to initialize toast manager:', error);
      }
    }
  }

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initToast);
  } else {
    initToast();
  }
</script>

<style>
  .toast-item {
    transition: all 0.3s ease-in-out;
  }
  
  .progress-bar {
    transition: width 0.075s ease-linear;
  }
</style>